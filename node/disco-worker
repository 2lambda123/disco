#!/usr/bin/env python
import os
import sys
import urllib

from disconode import disco_worker as dw
from disconode import external, util

from disconode.disco_worker import HTTP_PORT, LOCAL_PATH, PARAMS_FILE, EXT_MAP, EXT_REDUCE
from disconode.disco_worker import MAP_OUTPUT, CHUNK_OUTPUT, REDUCE_DL, REDUCE_SORTED, REDUCE_OUTPUT

from disco.netstring import decode_netstring_fd

if __name__ == "__main__":
        if len(sys.argv) < 7:
                util.err("Invalid command line. "\
                         "Usage: disco_worker [map|reduce] "\
                         "name hostname master_url partid inputs..")

        if "op_" + sys.argv[1] not in globals():
                util.err("Invalid operation: %s" % sys.argv[1])
      
        # Announce my PID to the master
        print >> sys.stderr, "**<PID>%s" % os.getpid()
        
        name = sys.argv[2]
        master_url = sys.argv[4]
        try:
                dw.ensure_path("%s/%s/" % (LOCAL_PATH, name), False)
                params_file = PARAMS_FILE % name
                url_hdle = urllib.urlopen("%s/%s/params" % (master_url, name))
                external.ensure_file(params_file,
                        (master_url, url_hdle), mode = 444)
                url_hdle.close()
                m = decode_netstring_fd(file(params_file))
        except:
                util.data_err("Decoding the job description failed", master_url)
        
        job_name = util.job_name = m['name']

        my_ver = ".".join(map(str, sys.version_info[:2]))
        if m["version"] != my_ver:
                msg("Python version mismatch: client = %s vs. node = %s" %\
                                (m["version"], my_ver), "DAT")
                sys.exit(1)

        globals()["op_" + sys.argv[1]](m)
        util.msg("Worker done", "END")








                

        











        
