#!/usr/bin/python
import os, sys

from disconode import disco_worker as dw
from disconode import external
from disconode.util import ensure_path 

from disconode.disco_worker import\
        HTTP_PORT, LOCAL_PATH, PARAMS_FILE, EXT_MAP, EXT_REDUCE,\
        MAP_OUTPUT, CHUNK_OUTPUT, REDUCE_DL, REDUCE_SORTED, REDUCE_OUTPUT,\
        OOB_FILE

from disco.netstring import decode_netstring_fd
from disco import util

if __name__ == "__main__":
        if len(sys.argv) < 7:
                util.err("Invalid command line. "\
                         "Usage: disco_worker [map|reduce] "\
                         "name hostname master_url partid inputs..")

      
        # Announce my PID to the master
        print >> sys.stderr, "**<PID>%s" % os.getpid()
        
        mode = sys.argv[1]
        name = sys.argv[2]
        master_url = sys.argv[4]

        ensure_path(OOB_FILE % "", False)

        try:
                url = "%s%s/params" % (master_url, name)
                external.ensure_file(PARAMS_FILE, url = url, mode = 444)
        except Exception, e:
                util.data_err("Failed to get %s" % url, master_url)

        try:
                m = decode_netstring_fd(file(PARAMS_FILE))
        except Exception, e:
                util.data_err("Decoding the job description failed", master_url)
        
        job_name = util.job_name = m['name']
        dw.status_interval = int(m['status_interval']) 

        my_ver = ".".join(map(str, sys.version_info[:2]))
        if m["version"] != my_ver:
                util.msg("Python version mismatch: client = %s vs. node = %s" %\
                                (m["version"], my_ver), "DAT")
                sys.exit(1)

        method = getattr(dw, 'op_' + mode, None)
        if method is None:
                util.err("Invalid operation: %s" % mode)
        
        if int(m['profile']):
                try:
                        import cProfile as prof
                except:
                        import profile as prof

                key = "profile-%s-%s" % (mode, sys.argv[5])
                prof.run("method(m)", OOB_FILE % key)
                dw.put(key, None) 
        else:
                method(m)
        
        util.msg("Worker done", "END")








                

        











        
